# 2차원 list - 행렬
# list에 list가 들어가버림

a = [[10, 20], [30, 40], [50, 60]]

# list 를 출력 한다 => print 보다는 for 문이 나와야함.
# 리스트 => 전체 탐색의 요소가 강함.

# 2차원 list 의 출력은 2중 포문이 나온다. (들여 쓰기를 잘 해야함!)

for value in a:
    for value2 in value:
        print(value2, end=' ')
    print()

# 리스트에서 몇 번째 요소를 가져오고 싶을 때 >> list[N-1]  여기서 list는 list 변수의 이름
listB = [1, 2, 3, 4, 5, 6, 7]

print(listB[3])

print(a[0][1])

print('#####################################')
# 파이썬에서는 2중포문을 사용하지 않아도 모두 출력할 수 있는 방법이 있습니다.

a = [[10, 20], [30, 40], [50, 60]]
for x, y in a:
    print(x, y)

# 컴퓨터에서 제일 좋은 에러는 컴파일 에러
# 코드 작성 중에 에러가 나는 에러 => 빨간 줄

# 2차원 리스트는 꼭 똑같은 길이의 리스트를 가지고 있을 필요가 없다
a = [[10, 20, 30], [40], [50, 60, 70, 80]]
for i in a:
    for j in i:
        print(j, end=' ')
    print()

### 복사 예제 (복사가 안됨!!)
# b = a (대입 연산자) -> 같은 주소의 집을 다른 이름으로 부르는 느낌임.
# print(b)
# #
# b[0] = [0]
# print(a) -> 여기서는 b를 바꿔도 a가 바뀜.

### 프로그램은 메모리라는 것이 있음.
# 변수도 메모리 주소를 기반으로 움직여 (메모리 할당)
# 복사 = 복사된 것을 바꿔도 원본에 지장이 없어야 하는게 복사
# 복사가 된 것을 바꿔도 원본에 지장이 없음.
# 대입 연산자를 했다고 꼭 복사가 되는것이 아니다.

# 프로그래밍에서는 복사를 deepcopy라고 함 (깊은 복사)
# 이런게 있다..

# 파이썬엔 이런게 있네 ㅅㅂ
b = a.copy()    # 깊은 복사 -> b의 요소를 수정해도 a의 요소에서 변하는 것은 없다.

b[0] = [0]
print('a ::', a)
print('b ::', b)
